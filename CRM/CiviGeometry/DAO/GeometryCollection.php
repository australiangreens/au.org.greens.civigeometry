<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from au.org.greens.civigeometry/xml/schema/CRM/CiviGeometry/GeometryCollection.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:21b6f672ce58922d0bb421b8a7c5838f)
 */
use CRM_CiviGeometry_ExtensionUtil as E;

/**
 * Database access object for the GeometryCollection entity.
 */
class CRM_CiviGeometry_DAO_GeometryCollection extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civigeometry_geometry_collection';

  /**
   * Field to show when displaying a record.
   *
   * @var string
   */
  public static $_labelField = 'label';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique GeometryCollection ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * FK to civigeomety_geometry_collection_type
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $geometry_collection_type_id;

  /**
   * Title of the Geometry Collection
   *
   * @var string
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $label;

  /**
   * Description of the Geometry Collection
   *
   * @var string|null
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $description;

  /**
   * Source of the Geometry Collection
   *
   * @var string|null
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $source;

  /**
   * Is this Geometry Collection archived
   *
   * @var bool|string|null
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $is_archived;

  /**
   * When was this Geometry Collection archived
   *
   * @var string
   *   (SQL type: timestamp)
   *   Note that values will be retrieved from the database as a string.
   */
  public $archived_date;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civigeometry_geometry_collection';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Geometry Collections') : E::ts('Geometry Collection');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique GeometryCollection ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civigeometry_geometry_collection.id',
          'table_name' => 'civigeometry_geometry_collection',
          'entity' => 'GeometryCollection',
          'bao' => 'CRM_CiviGeometry_DAO_GeometryCollection',
          'localizable' => 0,
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'geometry_collection_type_id' => [
          'name' => 'geometry_collection_type_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Geometry Collection Type ID'),
          'description' => E::ts('FK to civigeomety_geometry_collection_type'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civigeometry_geometry_collection.geometry_collection_type_id',
          'table_name' => 'civigeometry_geometry_collection',
          'entity' => 'GeometryCollection',
          'bao' => 'CRM_CiviGeometry_DAO_GeometryCollection',
          'localizable' => 0,
          'FKClassName' => 'CRM_CiviGeometry_DAO_GeometryCollectionType',
          'html' => [
            'type' => 'Select',
          ],
          'pseudoconstant' => [
            'table' => 'civigeometry_geometry_collection_type',
            'keyColumn' => 'id',
            'labelColumn' => 'label',
          ],
          'add' => NULL,
        ],
        'label' => [
          'name' => 'label',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Label'),
          'description' => E::ts('Title of the Geometry Collection'),
          'required' => TRUE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civigeometry_geometry_collection.label',
          'table_name' => 'civigeometry_geometry_collection',
          'entity' => 'GeometryCollection',
          'bao' => 'CRM_CiviGeometry_DAO_GeometryCollection',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'description' => [
          'name' => 'description',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Description'),
          'description' => E::ts('Description of the Geometry Collection'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civigeometry_geometry_collection.description',
          'default' => NULL,
          'table_name' => 'civigeometry_geometry_collection',
          'entity' => 'GeometryCollection',
          'bao' => 'CRM_CiviGeometry_DAO_GeometryCollection',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'source' => [
          'name' => 'source',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Source'),
          'description' => E::ts('Source of the Geometry Collection'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civigeometry_geometry_collection.source',
          'default' => NULL,
          'table_name' => 'civigeometry_geometry_collection',
          'entity' => 'GeometryCollection',
          'bao' => 'CRM_CiviGeometry_DAO_GeometryCollection',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'is_archived' => [
          'name' => 'is_archived',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Is Archived'),
          'description' => E::ts('Is this Geometry Collection archived'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civigeometry_geometry_collection.is_archived',
          'default' => '0',
          'table_name' => 'civigeometry_geometry_collection',
          'entity' => 'GeometryCollection',
          'bao' => 'CRM_CiviGeometry_DAO_GeometryCollection',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
          'add' => NULL,
        ],
        'archived_date' => [
          'name' => 'archived_date',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => E::ts('Archived Date'),
          'description' => E::ts('When was this Geometry Collection archived'),
          'required' => FALSE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civigeometry_geometry_collection.archived_date',
          'default' => NULL,
          'table_name' => 'civigeometry_geometry_collection',
          'entity' => 'GeometryCollection',
          'bao' => 'CRM_CiviGeometry_DAO_GeometryCollection',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'activityDateTime',
          ],
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'etry_geometry_collection', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'etry_geometry_collection', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'index_type_id_label' => [
        'name' => 'index_type_id_label',
        'field' => [
          0 => 'geometry_collection_type_id',
          1 => 'label',
        ],
        'localizable' => FALSE,
        'unique' => TRUE,
        'sig' => 'civigeometry_geometry_collection::1::geometry_collection_type_id::label',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
